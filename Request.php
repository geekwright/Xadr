<?php
/*
 * This file has its roots as part of the Mojavi package which was
 * Copyright (c) 2003 Sean Kerr. It has been incorporated into this
 * derivative work under the terms of the LGPL V2.1.
 * (http://www.gnu.org/licenses/lgpl-2.1.html)
 */

namespace Xmf\Xadr;

/**
 * A Request object holds data related to an application request including
 * the parameters (user input,) as well as related attributes and messages
 * established by the action(s) invoked as the request is proccessed.
 *
 * @category  Xmf\Xadr\Request
 * @package   Xmf
 * @author    Richard Griffith <richard@geekwright.com>
 * @author    Sean Kerr <skerr@mojavi.org>
 * @copyright 2013-2014 The XOOPS Project http://sourceforge.net/projects/xoops/
 * @copyright 2003 Sean Kerr
 * @license   GNU GPL 2 or later (http://www.gnu.org/licenses/gpl-2.0.html)
 * @link      http://xoops.org
 */
class Request
{

    /**
     * An attributes object.
     *
     * @var Attributes
     */
    public $attributes;

    /**
     * An associative array of errors.
     *
     * @var array
     */
    protected $errors;

    /**
     * The request method (REQUEST_GET, REQUEST_GET) used for this request.
     *
     * @var int
     */
    protected $method;

    /**
     * An associative array of user submitted parameters.
     *
     * @var array
     */
    protected $parameters;

    /**
     * Create a new Request instance. The three main pieces of request data - parameters,
     * attributes and errors - can be injected or will be created if omitted.
     *
     * Parameters are the input data, typically user input, such as web form or query data.
     *
     * Attributes are application generated in response to processing the input parameters.
     * Internally this is used to pass data between action, domain and responder. One typical
     * use is to capture raw data in an action that will be used by the responder, possibly
     * as template variables for rendering.
     *
     * Errors are message generated during validation of parameters, and will be stored under
     * the same key as the parameter that triggered the validation error.
     *
     * @param Attributes|array|null $parameters A parsed array of user submitted parameters.
     * @param Attributes|array|null $attributes Array of application generated attributes
     * @param Attributes|array|null $errors     A array of errors generated by the application
     */
    public function __construct($parameters = null, $attributes = null, $errors = null)
    {
        $this->parameters = $this->getAttributeObject(($parameters === null)
                                ? $this->fetchSystemParameters() : $parameters);
        $this->attributes = $this->getAttributeObject($attributes);
        $this->errors     = $this->getAttributeObject($errors);
        $this->method     = 'POST' == \Xmf\Request::getMethod() ? Xadr::REQUEST_POST : Xadr::REQUEST_GET;
    }

    /**
     * convert input into a Attribute object
     *
     * @param Attribute|array|null $input supplied input value
     *
     * @return Attribute object, either as passed, converted or new
     */
    private function getAttributeObject($input)
    {
        if ($input instanceof Attributes) {
            return $input;
        }
        if (is_array($input)) {
            return new Attributes($input);
        }
        return new Attributes();
    }

    /**
     * Retrieve the request method used for this request.
     *
     * @return integer A request method that is one of the following:
     * - Xadr::REQUEST_GET  - serve GET requests
     * - Xadr::REQUEST_POST - serve POST requests
     */
    public function getMethod()
    {
        return $this->method;
    }

    /**
     * Set the request method.
     *
     * @param int $method A request method that is one of the following:
     * - Xadr::REQUEST_GET  - serve GET requests
     * - Xadr::REQUEST_POST - serve POST requests
     *
     * @return void
     */
    public function setMethod($method)
    {
        $this->method = $method;
    }

    /**
     * Retrieve a user submitted parameter.
     *
     * @param string $name  A parameter name.
     * @param mixed  $value A default value.
     *
     * @return mixed A parameter value, if the given parameter exists,
     *               otherwise NULL.
     */
    public function getParameter($name, $value = null)
    {
        return $this->parameters->get($name, $value);
    }

    /**
     * Retrieve an associative array of user submitted parameters.
     *
     * @return array An array of parameters.
     */
    public function getParameters()
    {
        return $this->parameters;
    }

    /**
     * Determine if the request has a parameter.
     *
     * @param string $name A parameter name.
     *
     * @return bool TRUE if the given parameter exists, otherwise FALSE.
     */
    public function hasParameter($name)
    {
        return isset($this->parameters[$name]);
    }

    /**
     * Manually set a parameter.
     *
     * @param string $name  A parameter name.
     * @param mixed  $value A parameter value.
     *
     * @return void
     */
    public function setParameter($name, $value)
    {
        $this->parameters[$name] = $value;
    }

    /**
     * Manually set a parameter by reference.
     *
     * @param string $name  A parameter name.
     * @param mixed  $value A parameter value.
     *
     * @return void
     */
    public function setParameterByRef($name, &$value)
    {
        $this->parameters[$name] =& $value;
    }

    /**
     * Manually set all parameters at once by overwriting with array.
     *
     * @param array $value A parameter array
     *
     * @return void
     */
    public function setParameterArray($value)
    {
        $this->parameters->setAll($value);
    }

    /**
     * Retrieve an error message.
     *
     * @param string $name The name under which the message has been
     *                     registered. If the error is validation related,
     *                     it will be registered under a parameter name.
     *
     * @return string An error message if a validation error occured for
     *                      a parameter or was manually set, otherwise NULL.
     */
    public function getError($name)
    {
        return (isset($this->errors[$name])) ? $this->errors[$name] : null;
    }

    /**
     * Retrieve an associative array of errors.
     *
     * @param string|null $nameLike restrict result to only errors with a name starting with
     *                              this string.
     *
     * @return Attributes|array The errors object (Attributes) or an array of errors with keys
     *                          matching the specified $nameLike
     */
    public function getErrors($nameLike = null)
    {
        if ($nameLike !== null) {
            return $this->errors->getAllLike($nameLike);
        }
        return $this->errors;
    }

    /**
     * Retrieve errors as an HTML string
     *
     * @param string|null $nameLike restrict output to only errors with a name starting with
     *                              this string. This can be exploited by the application by
     *                              specify unique prefixes (such as 'global:') for errors not
     *                              related to a specific parameter.
     *
     * @return string HTML representation of errors
     */
    public function getErrorsAsHtml($nameLike = null)
    {
        $errorsoutput = '';
        if ($this->hasErrors()) {
            $errors = $this->errors->getAllLike($nameLike);
            if (!empty($errors)) {
                $errorsoutput = \Xoops::getInstance()->alert('error', $errors, 'Error');
            }
        }
        return $errorsoutput;
    }

    /**
     * Determine if an error has been set.
     *
     * @param string $name The name under which the message has been registered.
     *                      If the error is validation related, it will be
     *                      registered under a parameter name.
     *
     * @return bool TRUE if an error is set for the key, otherwise FALSE.
     */
    public function hasError($name)
    {
        return isset($this->errors[$name]);
    }

    /**
     * Determine if any error has been set.
     *
     * @return bool TRUE if any error has been set, otherwise FALSE.
     */
    public function hasErrors()
    {
        return (count($this->errors) > 0);
    }

    /**
     * Set an error message.
     *
     * @param string $name    The name under which to register the message.
     * @param string $message An error message.
     *
     * @return void
     */
    public function setError($name, $message)
    {
        $this->errors[$name] = $message;
    }

    /**
     * Set multiple error messages.
     *
     * @param array $errors An associative array of error messages.
     *
     * @return void
     */
    public function setErrors($errors)
    {
        $keys  = array_keys($errors);
        $count = count($keys);

        for ($i = 0; $i < $count; $i++) {
            $this->errors[$keys[$i]] = $errors[$keys[$i]];
        }
    }

    /**
     * get parameters.
     *
     * @return array An associative array of parameters.
     */
    private function fetchSystemParameters()
    {
        /**
         * \Xmf\Request::get($hash = 'default', $mask = 0)
         * bitmask values for $mask are:
         *   -  \Xmf\Request::NOTRIM    (1)  set to skip trim() on values
         *   -  \Xmf\Request::ALLOWRAW  (2)  set to disable html check
         *   -  \Xmf\Request::ALLOWHTML (4)  set to allow all html,
         *      clear for 'safe' only
         *
         * We will clean agressively. Raw values are not overwritten, so
         * code can go back and get directly with different options if
         * needed. Cleaning also handles magic_quotes_gpc clean up.
         *
         */

        // load GET params into $values array
        $values = \Xmf\Request::get('GET', 0);

        // merge POST params into $values array
        $values = array_merge($values, \Xmf\Request::get('POST', 0));

        return $values;
    }
}
